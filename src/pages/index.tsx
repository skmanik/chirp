import { type NextPage } from "next";
import Head from "next/head";
// import Link from "next/link";
import Image from "next/image";
import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";
import { useUser } from "@clerk/nextjs";
// import { SignOutButton } from "@clerk/nextjs";
import { LoadingPage } from "../components/loading";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();
  if (!user) return null;

  console.log("user", user);

  return (<div className="flex w-full gap-3">
    <Image 
      src={user.profileImageUrl} 
      alt="Profile Image" 
      className="w-14 h-14 rounded-full" 
      width={56} 
      height={56}
    />
    <input placeholder="Type some emojis!" className="bg-transparent grow outline-none" />
  </div>);
}

// need the type of a "Post" from our API query for posts in "Home" component
// we use some helpers from the utils/api.ts file to determine this type
type PostWithUser = RouterOutputs["posts"]["getAll"][number]
const PostView = (props: PostWithUser) => {
  const {post, author} = props;

  console.log("author", author);

  return (
    <div key={post.id} className="flex p-4 border-b border-slate-400 gap-3">
      <Image 
        src={author.profileImageUrl} 
        alt="Profile image" 
        className="w-14 h-14 rounded-full" 
        width={56} 
        height={56}
      />
      <div className="flex flex-col">
        <div className="flex text-slate-300">
          <span>{`@${author.username}`} Â· <span className="font-thin">{`${dayjs(post.createdAt).fromNow()}`}</span></span>
        </div>
        <span>{post.content}</span>
      </div>
    </div>
  );
}

const Feed = () => {
  // tRPC lets you make server functions on vercel
  // fetch datas from database
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();

  if (postsLoading) return <LoadingPage />;
  if (!data) return <div>Something went wrong.</div>;

  return (
    <div className="flex flex-col">
      {data?.map((fullPost) => (
        <PostView {...fullPost} key={fullPost.post.id} />
      ))}
    </div>
  );
}

const Home: NextPage = () => {
  const { isSignedIn, isLoaded: userLoaded } = useUser();

  // start fetching asap (react query only fetches once and starts caching)
  const { data } = api.posts.getAll.useQuery();

  // return empty div if user isn't loaded
  if (!userLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full md:max-w-2xl border-slate-400 border-x">
          {isSignedIn && <div className="border-b border-slate-400 p-4 flex justify">
            <div className="flex justify-center w-full">
              {/* <SignOutButton /> */}
              <CreatePostWizard />
            </div>
          </div>}
          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;